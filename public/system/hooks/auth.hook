<?php

use PHPMailer\PHPMailer\PHPMailer;

class Auth extends Processor
{
    public function __construct()
    {
        require_once FYNX_PUBLIC['system'] . 'libraries/phpmailer/src/PHPMailer.php';
        require_once FYNX_PUBLIC['system'] . 'libraries/phpmailer/src/Exception.php';
        require_once FYNX_PUBLIC['system'] . 'libraries/phpmailer/src/SMTP.php';
        require_once FYNX_PUBLIC['system'] . 'libraries/helpers.lib';
        require_once FYNX_PUBLIC['system'] . 'helpers/clusters.php';

        $this->mail = new PHPMailer(true);
        $this->helpers = new Helpers;
        $this->clusters = new Clusters;
        $this->user = new FynxUser;
        $this->helpers->installer();
    }

    public function signin($tenantId = null)
    {
        $this->user->is_login() === true ? $this->redirect('dashboard') : null;
        // is_null($tenantId) ? $this->redirect() : null;
        if (is_null($tenantId)) {$tenantId = "ORG";}
        $tenant_info = $this->get_record('fx_org', 'org_id,img,name')->where('org_id', $tenantId)->limit(1)->go();
        empty($tenant_info) ? $this->redirect() : null;
        $this->with('tenant_info', $tenant_info)->with('tenantId', $tenantId)->show('resources/auth/signin');
    }

    public function login()
    {
        $this->user->is_login() === true ? $this->redirect('dashboard') : null;
        $response = $this->user->login_user($_POST);
        if (strpos($response, 'session_already_exist') !== false) {
            $responseData = explode('_', $response);
            $_POST['user_id'] = $responseData[0];
            $this->with('data', base64_encode(json_encode($_POST)))->show('resources/auth/exists');
        } elseif ($response === true) {
            $this->clusters->get_tenant($_POST['org_id']);
            $this->redirect('dashboard');
        } else {
            $this->with('danger', 'Wrong Sign-in Credentials!')->redirect('auth/signin/' . $_POST['org_id']);
        }
    }

    public function sessionexist()
    {
        $response = $this->user->process_session_exist((array) json_decode(base64_decode($_POST['data'])));
        if ($response === true) {
            $this->clusters->get_tenant(json_decode(base64_decode($_POST['data']))->org_id);
            $this->redirect('dashboard');
        } else {
            $this->with('danger', 'Wrong Sign-in Credentials!')->redirect('auth/signin/' . json_decode(base64_decode($_POST['data']))->org_id);
        }
    }

    public function signup()
    {
        $this->user->is_login() === true ? $this->redirect('dashboard') : null;
        $this->show('resources/auth/signup');
    }

    public function register($send_email = '0', $auto_pwd = '1')
    {
        $this->user->is_login() === true ? $this->redirect('dashboard') : null;

        // generate random password and embed in POST data
        if ($auto_pwd === '1') {
            $_POST['password'] = $this->random_str(12);
        } else {
            if (!isset($_POST['password']) && $auto_pwd === '0') {
                $this->with('danger', 'Empty Password')->redirect('auth/signup/');
            }
        }
        $response = $this->user->register_user($_POST);
        if ($response === true) {

            // send email confirmation
            if ($send_email === '1') {
                $email = [
                    'from' => 'doNotReply@jencube.com',
                    'fromName' => 'Jencube Team',
                    'to' => $_POST['user_email'],
                    'subject' => 'Authentication Credentials',
                    'body' => '<strong>Login Credentials</strong><p></p>Username: ' . $_POST['user_email'] . '<br>Password: ' . $_POST['password'],
                ];
                $sent = $this->user->email_confirmation($email);
                if ($sent === true) {
                    $alert = 'success';
                    $message = 'Confirmation E-mail Sent Successfully!';
                } else {
                    $alert = "danger";
                    $message = 'E-mail Failure Delivery!';
                }
            } else {
                $alert = "success";
                $message = 'Account Sign-Up was Successful!';
            }
            if ($_POST['access'] != 3) {
                $this->with($alert, $message)->redirect('auth/signin/' . $_POST['org_id']);
            } else {
                $this->with($alert, $message)->redirect('pages/' . $_POST['org_id']);
            }
        } else {
            if ($_POST['access'] != 3) {
                $this->with('danger', ucwords(str_replace('_', ' ', $response)))->redirect('auth/signup');
            } else {
                $this->with('danger', ucwords(str_replace('_', ' ', $response)))->redirect('pages/home');
            }
        }
    }

    public function admission($tenantId = null)
    {
        $this->user->is_login() === true ? $this->redirect('dashboard') : null;
        is_null($tenantId) || $tenantId == "org" ? $this->redirect() : null;
        $tenant_info = $this->get_record('fx_org', 'org_id,img,name')->where('org_id', $tenantId)->limit(1)->go();
        empty($tenant_info) || $tenantId == "org" ? $this->redirect() : null;
        $this->with('tenant_info', $tenant_info)->with('tenantId', $tenantId)->show('resources/auth/admission');
    }

    public function admit($tenantId)
    {
        $this->user->is_login() === true ? $this->redirect('dashboard') : null;
        // if (is_null($tenantId)) {$tenantId = "ORG";}

        extract($_POST);
        if (isset($_FILES)) {
            foreach ($_FILES as $key => $value) {
                if (!empty($value['name'])) {
                    $this->filesystem->allow_overwriting();
                    $this->filesystem->set_input($key);
                    $this->filesystem->set_destination_directory(FYNX_PUBLIC['media'] . 'user-profile/');
                    // $this->filesystem->set_filename($user_id . '.%s');
                    $this->filesystem->set_auto_filename('.%s');
                    $this->filesystem->set_upload_function("copy");
                    $this->filesystem->save();
                    $img = $this->filesystem->get_info()->filename;
                }
            }
        }
        $user_array = [
            'user_id' => $this->guidv4(),
            'user_pass' => hash("sha512", md5("Password@1")),
            'user_phone' => $phone,
            'user_role' => 3,
            'user_name' => strtolower($firstname . '.' . $lastname),
            'user_email' => $email,
            'org_id' => $tenantId,
        ];
        $Student_array = [
            'user_id' => $user_array['user_id'],
            'firstname' => $firstname,
            'lastname' => $lastname,
            'middlename' => $middlename,
            'category_id' => $category_id,
            'gender' => $gender,
            'email' => $email,
            'phone' => $phone,
            'admission_no' => $this->random_str(12),
            'is_active' => 0,
            'img' => isset($img) ? $img : null,
            'org_id' => $tenantId,
        ];

        if (is_null($Student_array['img'])) {unset($Student_array['img']);}
        $user_insert = $this->add_record('fx_user', $user_array)->go();
        $Student_insert = $this->add_record('fx_person', $Student_array)->go();
        $result = array($user_insert, $Student_insert);
        switch ($result) {
            case array(false, true):
                $this->delete_record('fx_person', ['user_id' => $user_array['user_id']])->and_where('org_id', $_SESSION['user_session']['org_id'])->go();
                $this->with('danger', 'Student Admission was Unsuccessful!')->redirect();
                break;
            case array(true, false):
                $this->delete_record('fx_user', ['user_id' => $user_array['user_id']])->and_where('org_id', $_SESSION['user_session']['org_id'])->go();
                $this->with('danger', 'Student Admission was Unsuccessful!')->redirect();
                break;
            case array(false, false):
                $this->with('danger', 'Student Admission was Unsuccessful!')->redirect();
                break;
            default:

                // send credentials to student's email address

                // end send email

                isset($img) ? $_SESSION['user_session']['img'] = $img : null;
                $_SESSION['log']['note'] = 'Admitted Student Successfully!';
                $this->add_record('fx_log', $_SESSION['log'])->go();
                $this->with('success', $_SESSION['log']['note'])->redirect('auth/signin/' . $tenantId);
                break;
        }
    }

    public function signout($tenantId = null)
    {
        $user_role = isset($_SESSION['user_session']) ? $this->user->get_user_role($_SESSION['user_session']['user_id']) : null;
        is_null($tenantId) || is_null($user_role) ? $this->redirect() : null;
        if (isset($_GET['alert']) && $_GET['alert'] == 2) {
            $this->user->unset_session();
        } else {
            $this->user->logout();
        }
        if (isset($_GET['alert'])) {
            switch ($_GET['alert']) {
                case '1':
                    $notice = 'info';
                    $message = "Your Session has Expired!";
                    break;
                case '2':
                    $notice = 'danger';
                    $message = "Connected from another Computer!";
                    break;
                case '3':
                    $notice = 'info';
                    $message = "Already logged out!";
                    break;
                case '4':
                    $notice = 'info';
                    $message = "Account Deactivated Successfully!";
                    break;

                default:
                    $notice = 'success';
                    $message = 'Signed-Out Successfully!';
                    break;
            }
            $this->with($notice, $message)->redirect('auth/signin/' . $tenantId);
        }
        $this->with('success', 'Signed-Out Successfully!')->redirect('auth/signin/' . $tenantId);
    }

}