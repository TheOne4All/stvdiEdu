<?php

/**
 *
 * The Template class Encrypts and Decrypts any specified data.
 * An effective two way Encrypt/Decrypt library.
 *
 * @version:       1.18.21
 * @package:       FYNX Framework
 * @author:        Jencube Team
 * @license:       http://opensource.org/licenses/gpl-license.php
 *                 GNU General Public License (GPL)
 * @copyright:     Copyright (c) 2013 - 2021 Jencube
 * @github:        @deusex0 & @TheOne4All
 * @filesource:    system/libraries/cryptor.lib
 *
 **/

/*
////////// example ///////////
$cypto_message   = 'Fynx-Framework';
$secret_key= 'sdfejkv6r7twefdgef';
$encrypted = Cryptor::encrypt( $cypto_message,  $secret_key);
$decrypted = Cryptor::decrypt( $encrypted,$secret_key);
 */

class FynxCryptor
{
    /**
     *
     * Encryption Hash Algorithm
     *
     * @access protected
     * @var string
     *
     **/
    protected const HASH_ALGO = 'sha256';

    /**
     *
     * Encryption Method
     *
     * @access protected
     * @var string
     *
     **/
    protected const METHOD = 'AES-256-CBC';

    /**
     * Encrypts (but does not authenticate) a message
     *
     * @param string $cypto_message - plaintext message
     * @param string $cypto_key - encryption key (raw binary expected)
     * @param boolean $encode - set to TRUE to return a base64-encoded
     * @return string (raw binary)
     */
    public static function unsafe_encrypt($cypto_message, $cypto_key, $encode = false)
    {
        $nonceSize = openssl_cipher_iv_length(self::METHOD);
        $nonce = openssl_random_pseudo_bytes($nonceSize);

        $ciphertext = openssl_encrypt(
            $cypto_message,
            self::METHOD,
            $cypto_key,
            OPENSSL_RAW_DATA,
            $nonce
        );

        // Now let's pack the IV and the ciphertext together
        // Naively, we can just concatenate
        if ($encode) {
            return base64_encode($nonce . $ciphertext);
        }
        return $nonce . $ciphertext;
    }

    /**
     * Decrypts (but does not verify) a message
     *
     * @param string $cypto_message - ciphertext message
     * @param string $cypto_key - encryption key (raw binary expected)
     * @param boolean $encoded - are we expecting an encoded string?
     * @return string
     */
    public static function unsafe_decrypt($cypto_message, $cypto_key, $encoded = false)
    {
        if ($encoded) {
            $cypto_message = base64_decode($cypto_message, true);
            if ($cypto_message === false) {
                throw new Exception('Encryption failure');
            }
        }

        $nonceSize = openssl_cipher_iv_length(self::METHOD);
        $nonce = mb_substr($cypto_message, 0, $nonceSize, '8bit');
        $ciphertext = mb_substr($cypto_message, $nonceSize, null, '8bit');

        $plaintext = openssl_decrypt(
            $ciphertext,
            self::METHOD,
            $cypto_key,
            OPENSSL_RAW_DATA,
            $nonce
        );

        return $plaintext;
    }

    /**
     * Encrypts then MACs a message
     *
     * @param string $cypto_message - plaintext message
     * @param string $cypto_key - encryption key (raw binary expected)
     * @param boolean $encode - set to TRUE to return a base64-encoded string
     * @return string (raw binary)
     */
    public static function encrypt($cypto_message, $cypto_key, $encode = false)
    {
        $cypto_key = hex2bin(implode(unpack("H*", $cypto_key)));
        list($encKey, $authKey) = self::splitKeys($cypto_key);

        // Pass to UnsafeCrypto::encrypt
        $ciphertext = self::unsafe_encrypt($cypto_message, $encKey);

        // Calculate a MAC of the IV and ciphertext
        $mac = hash_hmac(self::HASH_ALGO, $ciphertext, $authKey, true);

        if ($encode) {
            return base64_encode($mac . $ciphertext);
        }
        // Prepend MAC to the ciphertext and return to caller
        return base64_encode($mac . $ciphertext);
    }

    /**
     * Decrypts a message (after verifying integrity)
     *
     * @param string $cypto_message - ciphertext message
     * @param string $cypto_key - encryption key (raw binary expected)
     * @param boolean $encoded - are we expecting an encoded string?
     * @return string (raw binary)
     */
    public static function decrypt($cypto_message, $cypto_key, $encoded = false)
    {
        $cypto_message = base64_decode($cypto_message);
        $cypto_key = hex2bin(implode(unpack("H*", $cypto_key)));
        list($encKey, $authKey) = self::splitKeys($cypto_key);
        if ($encoded) {
            $cypto_message = base64_decode($cypto_message, true);
            if ($cypto_message === false) {
                throw new Exception('Encryption failure');
            }
        }

        // Hash Size -- in case HASH_ALGO is changed
        $hs = mb_strlen(hash(self::HASH_ALGO, '', true), '8bit');
        $mac = mb_substr($cypto_message, 0, $hs, '8bit');

        $ciphertext = mb_substr($cypto_message, $hs, null, '8bit');

        $calculated = hash_hmac(
            self::HASH_ALGO,
            $ciphertext,
            $authKey,
            true
        );

        if (!self::hashEquals($mac, $calculated)) {
            throw new Exception('Encryption failure');
        }

        // Pass to UnsafeCrypto::decrypt
        $plaintext = self::unsafe_decrypt($ciphertext, $encKey);

        return $plaintext;
    }

    /**
     * Splits a key into two separate keys; one for encryption and the other for authenticaiton
     *
     * @param string $masterKey (raw binary)
     * @return array (two raw binary strings)
     */
    protected static function splitKeys($masterKey)
    {
        // You really want to implement HKDF here instead!
        return [
            hash_hmac(self::HASH_ALGO, 'ENCRYPTION', $masterKey, true),
            hash_hmac(self::HASH_ALGO, 'AUTHENTICATION', $masterKey, true),
        ];
    }

    /**
     * Compare two strings without leaking timing information
     *
     * @param string $a
     * @param string $b
     * @ref https://paragonie.com/b/WS1DLx6BnpsdaVQW
     * @return boolean
     */
    protected static function hashEquals($a, $b)
    {
        if (function_exists('hash_equals')) {
            return hash_equals($a, $b);
        }
        $nonce = openssl_random_pseudo_bytes(32);
        return hash_hmac(self::HASH_ALGO, $a, $nonce) === hash_hmac(self::HASH_ALGO, $b, $nonce);
    }
}